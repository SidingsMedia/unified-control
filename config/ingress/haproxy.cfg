# SPDX-FileCopyrightText: 2022-2025 Sidings Media <contact@sidingsmedia.com>
# SPDX-License-Identifier: MIT

global
    log stdout format raw local0 info

defaults
    mode http
    timeout client 10s
    timeout connect 5s
    timeout server 10s
    timeout http-request 10s
    log global

http-errors json
    errorfile 400 /usr/local/etc/haproxy/errors/json/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/json/403.http
    errorfile 404 /usr/local/etc/haproxy/errors/json/404.http
    errorfile 408 /usr/local/etc/haproxy/errors/json/408.http
    errorfile 429 /usr/local/etc/haproxy/errors/json/429.http
    errorfile 500 /usr/local/etc/haproxy/errors/json/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/json/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/json/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/json/504.http

frontend ingress
    bind :8080
    bind :::8080

    log-format "INGRESS %[src,sha1,base64] [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r"

    errorfiles json

    # Don't share server details with clients
    http-response del-header Server
    http-response del-header X-Powered-By
    http-response del-header X-AspNetMvc-Version
    http-response del-header X-AspNet-Version
    http-response del-header X-Generator
    http-response del-header X-Runtime
    http-response del-header X-Rack-Cache

    # Backend servers don't provide these responses themselves
    http-response return status 400 default-errorfiles if { status 400 }
    http-response return status 403 default-errorfiles if { status 403 }
    http-response return status 404 default-errorfiles if { status 404 }
    http-response return status 408 default-errorfiles if { status 408 }
    http-response return status 500 default-errorfiles if { status 500 }

    ######################
    ## OAuth Validation ##
    ######################

    http-request deny status 400 errorfile /usr/local/etc/haproxy/errors/json/missingAuthHdr.http if { path_beg /api/ } !{ req.hdr(authorization) -m found }  

    # get header part of the JWT
    http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg') if { path_beg /api/ }

    # get payload part of the JWT
    http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss') if { path_beg /api/ }
    http-request set-var(txn.aud) http_auth_bearer,jwt_payload_query('$.aud') if { path_beg /api/ }
    http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int') if { path_beg /api/ }
    http-request set-var(txn.scope) http_auth_bearer,jwt_payload_query('$.scope') if { path_beg /api/ }

    # Validate the JWT
    http-request deny status 400 errorfile /usr/local/etc/haproxy/errors/json/jwtInvalidAlg.http if { path_beg /api/ } !{ var(txn.alg) -m str RS256 } 
    http-request deny status 403 errorfile /usr/local/etc/haproxy/errors/json/jwtInvalidIss.http if { path_beg /api/ } !{ var(txn.iss) -m str %[str(oauth_iss),map("/usr/lib/etc/haproxy/config.map")] }
    http-request deny status 403 errorfile /usr/local/etc/haproxy/errors/json/jwtInvalidAud.http if { path_beg /api/ } !{ var(txn.aud) -m str %[str(oauth_aud),map("/usr/lib/etc/haproxy/config.map")] }
    http-request deny status 403 errorfile /usr/local/etc/haproxy/errors/json/jwtInvalidSig.http if { path_beg /api/ } !{ http_auth_bearer,jwt_verify(txn.alg,"/usr/lib/etc/haproxy/oauth.pem") -m int 1 }

    http-request set-var(txn.now) date()
    http-request deny status 401 errorfile /usr/local/etc/haproxy/errors/json/jwtExpired.http if { var(txn.exp),sub(txn.now) -m int lt 0 }

    # Check scopes
    http-request deny if { path_beg /api/ } { method GET }      !{ var(txn.scope) -m sub %[path,map(/usr/local/etc/haproxy/scopes/get.map)] }       !{ str(*) -m str %[path,map(/usr/local/etc/haproxy/scopes/get.map)] }
    http-request deny if { path_beg /api/ } { method POST }     !{ var(txn.scope) -m sub %[path,map(/usr/local/etc/haproxy/scopes/post.map)] }      !{ str(*) -m str %[path,map(/usr/local/etc/haproxy/scopes/post.map)] }
    http-request deny if { path_beg /api/ } { method PUT }      !{ var(txn.scope) -m sub %[path,map(/usr/local/etc/haproxy/scopes/put.map)] }       !{ str(*) -m str %[path,map(/usr/local/etc/haproxy/scopes/put.map)] }
    http-request deny if { path_beg /api/ } { method PATCH }    !{ var(txn.scope) -m sub %[path,map(/usr/local/etc/haproxy/scopes/patch.map)] }     !{ str(*) -m str %[path,map(/usr/local/etc/haproxy/scopes/patch.map)] }
    http-request deny if { path_beg /api/ } { method DELETE }   !{ var(txn.scope) -m sub %[path,map(/usr/local/etc/haproxy/scopes/delete.map)] }    !{ str(*) -m str %[path,map(/usr/local/etc/haproxy/scopes/delete.map)] }


    use_backend %[path,map_beg(/usr/local/etc/haproxy/routing.map,default)]
    
backend frontend
    server frontend frontend:80 check

backend rdns
  http-request set-path "%[path,regsub(^/api/v1/rdns/,/)]"
  server rdns rdns:3000 check

backend default_json
    description Default backend for all requests not handled. Returns a JSON 404 error
    errorfiles json
	http-request return status 404 default-errorfiles
